from typing import Any, Dict, List, Optional, Tuple, Union

import numpy as np
from _typeshed import Incomplete
from tensorboard.compat.proto.summary_pb2 import Summary

import torch

def _calc_scale_factor(tensor:torch.Tensor)->int:...
def hparams(hparam_dict: Optional[Dict[str, Incomplete]] = ..., metric_dict: Optional[Dict[str, Incomplete]]= ..., hparam_domain_discrete: Optional[Dict[str, List[Any]]] = ...) -> Tuple[Summary, Summary, Summary]: ...
def scalar(name:str, tensor:torch.Tensor, collections: Any | None = ..., new_style: bool = ..., double_precision: bool = ...) -> Summary: ...
def histogram_raw(name:str, min:Union[float, int], max:Union[float, int], num:int, sum:Union[float, int], sum_squares:Union[float, int], bucket_limits:torch.Tensor, bucket_counts:torch.Tensor)-> Summary: ...
def histogram(name:str, values:torch.Tensor, bins:Incomplete, max_bins: Optional[int] = ...)->Summary: ...
def make_histogram(values:np.ndarray, bins:Incomplete, max_bins: Optional[int] = ...)->Summary: ...
def image(tag:str, tensor: torch.Tensor, rescale: int = ..., dataformats: str = ...)->Summary: ...
def image_boxes(tag:str, tensor_image:Union[np.ndarray, torch.Tensor, str], tensor_boxes:Union[np.ndarray, torch.Tensor, str], rescale: int = ..., dataformats: str = ..., labels: Optional[np.ndarray] = ...): ...
def draw_boxes(disp_image:Union[torch.Tensor,np.ndarray], boxes:Union[torch.Tensor,np.ndarray], labels: Optional[np.ndarray] = ...)->np.ndarray: ...
def make_image(tensor:np.ndarray, rescale: int = ..., rois: Incomplete | None = ..., labels: Optional[np.ndarray] = ...)->Summary.Image: ...
def video(tag:str, tensor:Union[torch.Tensor, np.ndarray,str], fps:Union[float, int] = ...)->Summary: ...
def make_video(tensor:np.ndarray, fps:Union[float, int]) ->Summary.Image: ...
def audio(tag:str, tensor:Union[torch.Tensor, np.ndarray,str], sample_rate: int = ...)->Summary: ...
def custom_scalars(layout:Dict[str|Incomplete, Dict[str|Incomplete,Incomplete]])->Summary: ...
def text(tag:str, text:str) -> Summary: ...
def pr_curve_raw(tag:str, tp:np.ndarray, fp:np.ndarray, tn:np.ndarray, fn:np.ndarray, precision:np.ndarray, recall:np.ndarray, num_thresholds: int = ..., weights: Optional[np.ndarray] = ...)->Summary: ...
def pr_curve(tag:str, labels:np.ndarray, predictions:np.ndarray, num_thresholds: int = ..., weights: Optional[np.ndarray] = ...)->Summary: ...
def compute_curve(labels:np.ndarray, predictions:np.ndarray, num_thresholds: Optional[int] = ..., weights: Optional[np.ndarray] = ...)->np.ndarray: ...
def mesh(tag:str, vertices:torch.Tensor, colors:torch.Tensor, faces:torch.Tensor, config_dict:Dict[str, Dict|Incomplete], display_name: Optional[str] = ..., description: Optional[str] = ...)->Summary: ...
